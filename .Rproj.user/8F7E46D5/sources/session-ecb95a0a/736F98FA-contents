# ML_Estimation
#
# Estimations by the maximum likelihood methods
#
#
# You can learn more about package authoring with RStudio at:
#
#


#Definition of probability-generating functions

h <- function(z) {
  (1 - z)^((1 - z) / z)
}

px <- function(z,Am,m1,Amm) {
  (h(z)^{Am}) * (h(h(z)^m1)^{Amm})
}

psb <- function(z,pb) {
  (1 - pb) + pb * z
}

ps <- function(z,p) {
  (1 - p) + p * z
}

pgb <- function(z,Am,m1,pb,Amm) {
  px(psb(z,pb),Am,m1,Amm)
}

pgs <- function(z,p,Am,m1,Amm){
  px(ps(z,p),Am,m1,Amm)
}

#Dilution process: Binomial sampling, with probability ps1, of resistant cell in the j-th growth cycle
binomial_sampling_GC_j<-function(td,j,ps1){
  a=c()
  for (i in 1:nrow(td)){
    a=c(a,rbinom(n = 1, size = (td[, (4 * (j - 1) + 2)]+td[ ,(4 * (j - 1) + 4)])[i], prob = ps1))
  }
  return(a)
}

#Recovery of the k-th probability state of the pmf
#WT2R  Mutation rate from wildtype to resistant cells
#WT2M  Mutation rate from wildtype to mutator cells
#pop   Final population size
#N     Total number of probability states
pmf_coeff<-function(k,WT2R,WT2M,M2R,pop,N,ps1){
  sum=0
  for(n in 0:(N-1)){
    #Auxiliary variable to transform the pgf into a characteristic function
    aux_char=exp((2i*pi*n)/N)
    #Auxiliary variable to apply the FFT algorithm
    aux=(-1*2i*pi*n*k)/N
    #FFT
    sum=sum + pgs(aux_char,p=ps1,Am=10^{WT2R}*pop,m1=10^{WT2M},Amm=10^{M2R}*pop)*exp(aux)
  }
  #Real part
  return(Re(sum/N))
}

discretization_fun<-function(range, n){
  mu_min=range[1]
  mu_max=range[2]
  a=seq(0,n)
  result=mu_min*(mu_max/mu_min)^{a/n}
  return(result)
}

#log-likelihood function
ll_fun<-function(data,WT2R,WT2M,M2R,pop_size,N,ps1){
  sum(log(pmf_coeff(data+1,WT2R,WT2M,M2R,pop_size,N,ps1)))
}
ML_Estimation=function(File, population_size, resample_size, GC, dilution, discretization,
                       WT2R_bounds, WT2M_bounds, M2R_bounds){
  #Reading the file
  td <- read.table(File,header = T,sep="")
  #Binomial sampling of resistant cells in the j-th growth cycle, j=1
  data<-binomial_sampling_GC_j(td, j=GC,p=dilution)

  data=sample(data, resample_size, replace = T)

  #Maximum value in data
  N=max(data)
  N


  #Sample space discretization
  paramters_WT2R=WT2R_bounds
  WT2R=discretization_fun(paramters_WT2R,discretization)
  paramters_WT2M=WT2M_bounds
  WT2M=discretization_fun(paramters_WT2M,discretization)
  paramters_M2R=M2R_bounds
  M2R=discretization_fun(paramters_M2R,discretization)

  #Initial maximum
  max=ll_fun(data,WT2R = WT2R[1], WT2M = WT2M[1], M2R=M2R[1], population_size, N, dilution)

  powers=c()
  output=c()
  for(i in WT2R){
    for(j in WT2M){
      for(k in M2R){
        aux=ll_fun(data, WT2R = i, WT2M = j, M2R = k,population_size, N, dilution)
        output=rbind(output, c(10^{i}, 10^{j}, 10^{k}, aux))
        if(max<aux){
          max=aux
          powers=c(i,j,k)
        }
      }
    }
  }

  #Maximum value
  max
  #Estimations on log_10 scale
  names(powers)=c('Wildtype to Mutant', 'Wildtype to Mutator', 'Mutator to Mutant mutator')
  out=list(10^{powers}, max, output)
  return(out)
}

#FILENAME="R-GM - FinalPop 2^33, bottle neck 2^20, growth cycles 3, WT2R 10^-7, WT2M 1e-06 M2R 5e-05.txt"
FILENAME="R-QM - FinalPop 2^33, bottle neck 2^20, growth cycles 3, WT2R 10^-7, WT2M 1e-05 M2R 5e-04.txt"
#FILENAME <- "luria_4trans_1.00e-007mua_2seed.txt"


## Bootstrap procedure with replacement
library(parallel)

cl <- makeCluster(detectCores() - 1)
cl

library(doParallel)
registerDoParallel(cl)
rep=500
output<-foreach(k=1:rep)%dopar%{
  ML_Estimation(File=FILENAME, population_size=2^33, resample_size=50, GC=1, dilution=runif(1,0.00005,2^{20}/2^{33}),
                discretization=20, WT2R_bounds=c(-9, -5), WT2M_bounds=c(-7, -3), M2R_bounds=c(-5.3, -1.3))
}

result_1=c()
for(j in 1:rep){
  result_1=rbind(result_1,output[[j]][[1]])
}


#Estimation
estimate_WT2R=mean(result_1[,1])
estimate_WT2M=mean(result_1[,2])
estimate_M2R=mean(result_1[,3])

confidence_intervals=matrix(0,3,3)
confidence_intervals[1,1]=estimate_WT2R
confidence_intervals[2,1]=estimate_WT2M
confidence_intervals[3,1]=estimate_M2R

#95% confidence region
alpha=0.05
for(i in 1:ncol(result_1)){
  aux=result_1[,i]
  aux=sort(aux)
  lower=round(alpha/2*(nrow(result_1)+1))
  upper=round((1-alpha/2)*(nrow(result_1)+1))
  if(lower==0){
    lower=1
  }
  if(upper>nrow(result_1)){
    upper=nrow(result_1)
  }
  confidence_intervals[i,2]=aux[lower]
  confidence_intervals[i,3]=aux[upper]
}


colnames(confidence_intervals)=c('Estimate', 'Lower bound', 'Upper bound')
rownames(confidence_intervals)=c(paste('Wildtype to Mutant | GC',GC), paste('Wildtype to Mutator | CG',GC), paste('Mutator to Mutant mutator  | GC',GC))
confidence_intervals









#Estimation
estimate=mean(result_1[,2])
estimate

#95% confidence region
alpha=0.05
confidence_intervals=matrix(0,1,3)
#for(i in 1:ncol(result_1[,2])){
aux=qt(p= alpha/2, df=rep-1, lower.tail = F)*var(result_1[,2])/sqrt(rep)
aux
lower=estimate-aux
upper=estimate+aux

confidence_intervals[1,1]=lower
confidence_intervals[1,2]=upper
#}

if( confidence_intervals[1,1] <= 10^{-5} &&  10^{-5} <= confidence_intervals[1,2] ){
  confidence_intervals[1,3]=1
}

colnames(confidence_intervals)=c('Lower bound', 'Upper bound', ' Contained?')
#rownames(confidence_intervals)=c(paste('WT2R | GC',GC), paste('WT2M | CG',GC), paste('M2R  | GC',GC))
confidence_intervals





