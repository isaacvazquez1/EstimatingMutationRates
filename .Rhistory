registerDoParallel(cl)
rep=Replicates
output<-foreach(k=1:rep)%dopar%{
EstimatingMutationRates::LSQ_Estimation(File, population_size, GC, dilution, discretization, WT2R_bounds, WT2M_bounds, M2R_bounds)
}
result_1=c()
for(j in 1:rep){
result_1=rbind(result_1,output[[j]])
}
#Estimation
estimate_WT2R=mean(result_1[,1])
estimate_WT2M=mean(result_1[,2])
estimate_M2R=mean(result_1[,3])
confidence_intervals=matrix(0,3,3)
confidence_intervals[1,1]=estimate_WT2R
confidence_intervals[2,1]=estimate_WT2M
confidence_intervals[3,1]=estimate_M2R
#95% confidence region
alpha
for(i in 1:ncol(result_1)){
aux=result_1[,i]
aux=sort(aux)
lower=round(alpha/2*(nrow(result_1)+1))
upper=round((1-alpha/2)*(nrow(result_1)+1))
if(lower==0){
lower=1
}
if(upper>nrow(result_1)){
upper=nrow(result_1)
}
confidence_intervals[i,2]=aux[lower]
confidence_intervals[i,3]=aux[upper]
}
colnames(confidence_intervals)=c('Estimate', 'Lower bound', 'Upper bound')
rownames(confidence_intervals)=c(paste('Wildtype to Mutant | GC',GC), paste('Wildtype to Mutator | CG',GC), paste('Mutator to Mutant mutator  | GC',GC))
return(confidence_intervals)
}
confidence_intervals=matrix(0,3,3)
confidence_intervals[1,1]=estimate_WT2R
dilution,discretization, WT2R_bounds, WT2M_bounds, M2R_bounds){
library(parallel)
cl <- makeCluster(detectCores() - FreeCores)
cl
library(doParallel)
registerDoParallel(cl)
rep=Replicates
output<-foreach(k=1:rep)%dopar%{
EstimatingMutationRates::LSQ_Estimation(File, population_size, GC, dilution, discretization, WT2R_bounds, WT2M_bounds, M2R_bounds)
}
result_1=c()
for(j in 1:rep){
result_1=rbind(result_1,output[[j]])
}
result_1
estimate_WT2R=mean(result_1[,1])
estimate_WT2M=mean(result_1[,2])
estimate_M2R=mean(result_1[,3])
confidence_intervals=matrix(0,3,3)
confidence_intervals[1,1]=estimate_WT2R
confidence_intervals[2,1]=estimate_WT2M
confidence_intervals[3,1]=estimate_M2R
confidence_intervals
confidence_intervals[2,2]
confidence_intervals[2,3]
i=1
aux=result_1[,i]
aux
aux=sort(aux)
aux
lower=round(alpha/2*(nrow(result_1)+1))
upper=round((1-alpha/2)*(nrow(result_1)+1))
lower
upper
if(lower==0){
lower=1
}
if(upper>nrow(result_1)){
upper=nrow(result_1)
}
lower
upper
aux[1]
aux[5]
confidence_intervals[i,2]=aux[lower]
confidence_intervals[i,3]=aux[upper]
confidence_intervals
library(EstimatingMutationRates)
FILENAME="QM-Mutants.txt"
LSQ_Bootstrap_CI(Replicates=5, alpha=0.05, FreeCores=5, File=FILENAME, population_size=2^33, GC=1, dilution=0.0005, discretization=25, WT2R_bounds=c(-8, -5), WT2M_bounds=c(-7, -3), M2R_bounds=c(-7, -3))
setwd("~/GitHub/EstimatingMutationRates/R")
library(EstimatingMutationRates)
ML_Estimation(File=FILENAME, population_size=2^33, resampling=F, resample_size=50, GC=2, dilution=0.0001,discretization=25, WT2R_bounds=c(-8, -5), WT2M_bounds=c(-7, -3), M2R_bounds=c(-7, -3))
library(EstimatingMutationRates)
ML_Estimation(File=FILENAME, population_size=2^33, resampling=F, resample_size=50, GC=2, dilution=0.0001,discretization=25, WT2R_bounds=c(-8, -5), WT2M_bounds=c(-7, -3), M2R_bounds=c(-7, -3))
setwd("~/GitHub/EstimatingMutationRates/R")
FILENAME="QM-Mutants.txt"
LSQ_Bootstrap_CI(Replicates=5, alpha=0.05, FreeCores=5, File=FILENAME, population_size=2^33, GC=1, dilution=0.0005, discretization=25, WT2R_bounds=c(-8, -5), WT2M_bounds=c(-7, -3), M2R_bounds=c(-7, -3))
library(EstimatingMutationRates)
LSQ_Bootstrap_CI(Replicates=5, alpha=0.05, FreeCores=5, File=FILENAME, population_size=2^33, GC=1, dilution=0.0005, discretization=25, WT2R_bounds=c(-8, -5), WT2M_bounds=c(-7, -3), M2R_bounds=c(-7, -3))
use_data(FILENAME)
library(devtools)
use_data(FILENAME)
load("~/GitHub/EstimatingMutationRates/data/FILENAME.rda")
load("~/GitHub/EstimatingMutationRates/data/FILENAME.rda")
setwd("~/GitHub/EstimatingMutationRates")
LSQ_Bootstrap_CI(Replicates=5, alpha=0.05, FreeCores=5, File=FILENAME, population_size=2^33, GC=1, dilution=0.0005, discretization=25, WT2R_bounds=c(-8, -5), WT2M_bounds=c(-7, -3), M2R_bounds=c(-7, -3))
setwd("~/GitHub/EstimatingMutationRates/R/ExampleWorkingDirectory")
estimates=LSQ_Estimation(File=FILENAME, population_size=2^33, GC=3, dilution=0.0000005,
discretization=30, WT2R_bounds=c(-8, -5), WT2M_bounds=c(-7, -3), M2R_bounds=c(-7, -3))
estimates
LSQ_Bootstrap_CI(Replicates=500, alpha=0.05, FreeCores=5, File=FILENAME, population_size=2^33, GC=1, dilution=0.0005, discretization=25, WT2R_bounds=c(-9.5, -5.5), WT2M_bounds=c(-8, -4), M2R_bounds=c(-7, -3))
LSQ_Bootstrap_CI(Replicates=5, alpha=0.05, FreeCores=5, File=FILENAME, population_size=2^33, GC=1, dilution=0.0005, discretization=25, WT2R_bounds=c(-9.5, -5.5), WT2M_bounds=c(-8, -4), M2R_bounds=c(-7, -3))
FILENAME="QM-Mutants.txt"
ML_Jackknife_CI(Replicates=5, alpha=0.05, FreeCores=5, File=FILENAME, population_size=2^33, resample_size=50, GC=1, dilution_lowerbound=0.00005, dilution_upperbound=2^20/2^33, discretization=25, WT2R_bounds=c(-8, -5), WT2M_bounds=c(-7, -3), M2R_bounds=c(-6, -2))
library(EstimatingMutationRates)
setwd("~/GitHub/EstimatingMutationRates/R/ExampleWorkingDirectory")
# ML_Estimation
#
# Estimations by the maximum likelihood methods
#
#
# You can learn more about package authoring with RStudio at:
#
#
#Definition of probability-generating functions
h <- function(z) {
(1 - z)^((1 - z) / z)
}
px <- function(z,Am,m1,Amm) {
(h(z)^{Am}) * (h(h(z)^m1)^{Amm})
}
psb <- function(z,pb) {
(1 - pb) + pb * z
}
ps <- function(z,p) {
(1 - p) + p * z
}
pgb <- function(z,Am,m1,pb,Amm) {
px(psb(z,pb),Am,m1,Amm)
}
pgs <- function(z,p,Am,m1,Amm){
px(ps(z,p),Am,m1,Amm)
}
ML_Estimation=function(File, population_size, resampling, resample_size, GC, dilution, discretization,
WT2R_bounds, WT2M_bounds, M2R_bounds, alpha){
#Dilution process: Binomial sampling, with probability ps1, of resistant cell in the j-th growth cycle
binomial_sampling_GC_j<-function(td,j,ps1){
a=c()
for (i in 1:nrow(td)){
a=c(a,rbinom(n = 1, size = (td[ , 2*j-1]+td[ , 2*j])[i], prob = ps1))
}
return(a)
}
#Recovery of the k-th probability state of the pmf
#WT2R  Mutation rate from wildtype to resistant cells
#WT2M  Mutation rate from wildtype to mutator cells
#pop   Final population size
#N     Total number of probability states
pmf_coeff<-function(k,WT2R,WT2M,M2R,pop,N,ps1){
sum=0
for(n in 0:(N-1)){
#Auxiliary variable to transform the pgf into a characteristic function
aux_char=exp((2i*pi*n)/N)
#Auxiliary variable to apply the FFT algorithm
aux=(-1*2i*pi*n*k)/N
#FFT
sum=sum + pgs(aux_char,p=ps1,Am=10^{WT2R}*pop,m1=10^{WT2M},Amm=10^{M2R}*pop)*exp(aux)
}
#Real part
return(Re(sum/N))
}
discretization_fun<-function(range, n){
mu_min=range[1]
mu_max=range[2]
a=seq(0,n)
result=mu_min*(mu_max/mu_min)^{a/n}
return(result)
}
#log-likelihood function
ll_fun<-function(data,WT2R,WT2M,M2R,pop_size,N,ps1){
sum(log(pmf_coeff(data+1,WT2R,WT2M,M2R,pop_size,N,ps1)))
}
#Reading the file
td <- read.table(File,header = T,sep="")
#Binomial sampling of resistant cells in the j-th growth cycle, j=1
data<-binomial_sampling_GC_j(td, j=GC,p=dilution)
if(resampling==T){
data=sample(data, resample_size, replace = T)
}
#Maximum value in data
N=max(data)
N
#Sample space discretization
paramters_WT2R=WT2R_bounds
WT2R=discretization_fun(paramters_WT2R,discretization)
paramters_WT2M=WT2M_bounds
WT2M=discretization_fun(paramters_WT2M,discretization)
paramters_M2R=M2R_bounds
M2R=discretization_fun(paramters_M2R,discretization)
#Initial maximum
max=ll_fun(data,WT2R = WT2R[1], WT2M = WT2M[1], M2R=M2R[1], population_size, N, dilution)
powers=c()
output=c()
for(i in WT2R){
for(j in WT2M){
for(k in M2R){
aux=ll_fun(data, WT2R = i, WT2M = j, M2R = k,population_size, N, dilution)
output=rbind(output, c(10^{i}, 10^{j}, 10^{k}, aux))
if(max<aux){
max=aux
powers=c(i,j,k)
}
}
}
}
#Maximum value
max
#Estimations on log_10 scale
names(powers)=c('Wildtype to Mutant', 'Wildtype to Mutator', 'Mutator to Mutant mutator')
df=as.data.frame(output)
df_confidence<-df[df[,4] >= max-qchisq(1-alpha,2)/2, ]
CI=matrix(0,3,2)
row.names(CI)=c('Wildtype to Mutant', 'Wildtype to Mutator', 'Mutator to Mutant mutator')
colnames(CI)=c('Lower bound','Upper bound')
CI[1,1]=min(df_confidence$V1)
CI[1,2]=max(df_confidence$V1)
CI[2,1]=min(df_confidence$V2)
CI[2,2]=max(df_confidence$V2)
CI[3,1]=min(df_confidence$V3)
CI[3,2]=max(df_confidence$V3)
out=list(10^{powers}, CI, output)
names(out)<-c('Estimations', 'ML_Confidence_Interval', 'Log_likelihood')
return(out)
}
FILENAME="GM-Mutants.txt"
ML_Estimation(File=FILENAME, population_size=2^33, resampling=F, resample_size=50, GC=2, dilution=0.0001,discretization=25, WT2R_bounds=c(-8, -5), WT2M_bounds=c(-7, -3), M2R_bounds=c(-7, -3), alpha=0.05)
ML_Jackknife_CI(Replicates=2, alpha=0.05, FreeCores=5, File=FILENAME, population_size=2^33, resample_size=50, GC=1, dilution_lowerbound=0.00005, dilution_upperbound=2^20/2^33, discretization=25, WT2R_bounds=c(-8, -5), WT2M_bounds=c(-7, -3), M2R_bounds=c(-7, -3))
# ML_Jackknife_CI
#
#
#
#
# You can learn more about package authoring with RStudio at:
#
#
ML_Jackknife_CI<-function(Replicates, alpha, FreeCores, File, population_size, resample_size, GC, dilution_lowerbound, dilution_upperbound, discretization,
WT2R_bounds, WT2M_bounds, M2R_bounds){
## Bootstrap procedure with replacement
library(parallel)
cl <- makeCluster(detectCores() - FreeCores)
cl
library(doParallel)
registerDoParallel(cl)
rep=Replicates
output<-foreach(k=1:rep)%dopar%{
EstimatingMutationRates::ML_Estimation(File, population_size, resampling = T, resample_size, GC, dilution=runif(1,dilution_lowerbound,dilution_upperbound),
discretization, WT2R_bounds, WT2M_bounds, M2R_bounds, alpha=0.05)
}
result_1=c()
for(j in 1:rep){
result_1=rbind(result_1,output[[j]][[1]])
}
#Estimation
estimate_WT2R=mean(result_1[,1])
estimate_WT2M=mean(result_1[,2])
estimate_M2R=mean(result_1[,3])
confidence_intervals=matrix(0,3,3)
confidence_intervals[1,1]=estimate_WT2R
confidence_intervals[2,1]=estimate_WT2M
confidence_intervals[3,1]=estimate_M2R
#(1-alpha)100% confidence region
aux_WT2R=qt(p= alpha/2, df=rep-1, lower.tail = F)*var(result_1[,1])/sqrt(rep)
aux_WT2M=qt(p= alpha/2, df=rep-1, lower.tail = F)*var(result_1[,2])/sqrt(rep)
aux_M2R=qt(p= alpha/2, df=rep-1, lower.tail = F)*var(result_1[,3])/sqrt(rep)
confidence_intervals[1,2]=estimate_WT2R-aux_WT2R
confidence_intervals[1,3]=estimate_WT2R+aux_WT2R
confidence_intervals[2,2]=estimate_WT2M-aux_WT2M
confidence_intervals[2,3]=estimate_WT2M+aux_WT2M
confidence_intervals[3,2]=estimate_M2R-aux_M2R
confidence_intervals[3,3]=estimate_M2R+aux_M2R
colnames(confidence_intervals)=c('Estimate', 'Lower bound', 'Upper bound')
rownames(confidence_intervals)=c(paste('Wildtype to Mutant | GC',GC), paste('Wildtype to Mutator | CG',GC), paste('Mutator to Mutant mutator  | GC',GC))
return(confidence_intervals)
}
ML_Estimation(File=FILENAME, population_size=2^33, resampling=F, resample_size=50, GC=2, dilution=0.0001,discretization=25, WT2R_bounds=c(-8, -5), WT2M_bounds=c(-7, -3), M2R_bounds=c(-7, -3), alpha=0.05)
# ML_Estimation
#
# Estimations by the maximum likelihood methods
#
#
# You can learn more about package authoring with RStudio at:
#
#
#Definition of probability-generating functions
h <- function(z) {
(1 - z)^((1 - z) / z)
}
px <- function(z,Am,m1,Amm) {
(h(z)^{Am}) * (h(h(z)^m1)^{Amm})
}
psb <- function(z,pb) {
(1 - pb) + pb * z
}
ps <- function(z,p) {
(1 - p) + p * z
}
pgb <- function(z,Am,m1,pb,Amm) {
px(psb(z,pb),Am,m1,Amm)
}
pgs <- function(z,p,Am,m1,Amm){
px(ps(z,p),Am,m1,Amm)
}
ML_Bivariate=function(File, population_size, resampling, resample_size, GC, dilution, discretization,
WT2R_bounds, WT2M_bounds, strength, alpha){
#Dilution process: Binomial sampling, with probability ps1, of resistant cell in the j-th growth cycle
binomial_sampling_GC_j<-function(td,j,ps1){
a=c()
for (i in 1:nrow(td)){
a=c(a,rbinom(n = 1, size = (td[ , 2*j-1]+td[ , 2*j])[i], prob = ps1))
}
return(a)
}
#Recovery of the k-th probability state of the pmf
#WT2R  Mutation rate from wildtype to resistant cells
#WT2M  Mutation rate from wildtype to mutator cells
#pop   Final population size
#N     Total number of probability states
pmf_coeff<-function(k,WT2R,WT2M,M2R,pop,N,ps1,strength){
sum=0
for(n in 0:(N-1)){
#Auxiliary variable to transform the pgf into a characteristic function
aux_char=exp((2i*pi*n)/N)
#Auxiliary variable to apply the FFT algorithm
aux=(-1*2i*pi*n*k)/N
#FFT
sum=sum + pgs(aux_char,p=ps1,Am=10^{WT2R}*pop,m1=10^{WT2M},Amm=strength*10^{WT2R}*pop)*exp(aux)
}
#Real part
return(Re(sum/N))
}
discretization_fun<-function(range, n){
mu_min=range[1]
mu_max=range[2]
a=seq(0,n)
result=mu_min*(mu_max/mu_min)^{a/n}
return(result)
}
#log-likelihood function
ll_fun<-function(data,WT2R,WT2M,M2R,pop_size,N,ps1,strength){
sum(log(pmf_coeff(data+1,WT2R,WT2M,M2R,pop_size,N,ps1,strength)))
}
#Reading the file
td <- read.table(File,header = F,sep="")
#Binomial sampling of resistant cells in the j-th growth cycle, j=1
data<-binomial_sampling_GC_j(td, j=GC,p=dilution)
if(resampling==T){
data=sample(data, resample_size, replace = T)
}
#Maximum value in data
N=max(data)
N
#Sample space discretization
paramters_WT2R=WT2R_bounds
WT2R=discretization_fun(paramters_WT2R,discretization)
paramters_WT2M=WT2M_bounds
WT2M=discretization_fun(paramters_WT2M,discretization)
#Initial maximum
max=ll_fun(data, WT2R = WT2R[1], WT2M = WT2M[1], M2R=WT2R[1], population_size, N, dilution, strength)
powers=c()
output=c()
for(i in WT2R){
for(j in WT2M){
aux=ll_fun(data, WT2R = i, WT2M = j, M2R = i,population_size, N, dilution, strength)
output=rbind(output, c(10^{i}, 10^{j}, strength*10^{i}, aux))
if(max<aux){
max=aux
powers=c(10^{i}, 10^{j}, strength*10^{i})
}
}
}
#Maximum value
max
names(powers)=c('Wildtype to Mutant', 'Wildtype to Mutator', 'Mutator to Mutant mutator')
df=as.data.frame(output)
df_confidence<-df[df[,4] >= max-qchisq(1-alpha,2)/2, ]
CI=matrix(0,3,2)
row.names(CI)=c('Wildtype to Mutant', 'Wildtype to Mutator', 'Mutator to Mutant mutator')
colnames(CI)=c('Lower bound','Upper bound')
CI[1,1]=min(df_confidence$V1)
CI[1,2]=max(df_confidence$V1)
CI[2,1]=min(df_confidence$V2)
CI[2,2]=max(df_confidence$V2)
CI[3,1]=min(df_confidence$V3)
CI[3,2]=max(df_confidence$V3)
out=list(powers, CI, max, output)
return(out)
}
ML_Bivariate(File=FILENAME, population_size=2^33, resampling = F, resample_size=0, GC=1, dilution=0.0001, discretization=25, WT2R_bounds=c(-8, -5), WT2M_bounds=c(-7, -3), strength= 1000, alpha=0.05)
# ML_Estimation
#
# Estimations by the maximum likelihood methods
#
#
# You can learn more about package authoring with RStudio at:
#
#
#Definition of probability-generating functions
h <- function(z) {
(1 - z)^((1 - z) / z)
}
px <- function(z,Am,m1,Amm) {
(h(z)^{Am}) * (h(h(z)^m1)^{Amm})
}
psb <- function(z,pb) {
(1 - pb) + pb * z
}
ps <- function(z,p) {
(1 - p) + p * z
}
pgb <- function(z,Am,m1,pb,Amm) {
px(psb(z,pb),Am,m1,Amm)
}
pgs <- function(z,p,Am,m1,Amm){
px(ps(z,p),Am,m1,Amm)
}
ML_Bivariate=function(File, population_size, resampling, resample_size, GC, dilution, discretization,
WT2R_bounds, WT2M_bounds, strength, alpha){
#Dilution process: Binomial sampling, with probability ps1, of resistant cell in the j-th growth cycle
binomial_sampling_GC_j<-function(td,j,ps1){
a=c()
for (i in 1:nrow(td)){
a=c(a,rbinom(n = 1, size = (td[ , 2*j-1]+td[ , 2*j])[i], prob = ps1))
}
return(a)
}
#Recovery of the k-th probability state of the pmf
#WT2R  Mutation rate from wildtype to resistant cells
#WT2M  Mutation rate from wildtype to mutator cells
#pop   Final population size
#N     Total number of probability states
pmf_coeff<-function(k,WT2R,WT2M,M2R,pop,N,ps1,strength){
sum=0
for(n in 0:(N-1)){
#Auxiliary variable to transform the pgf into a characteristic function
aux_char=exp((2i*pi*n)/N)
#Auxiliary variable to apply the FFT algorithm
aux=(-1*2i*pi*n*k)/N
#FFT
sum=sum + pgs(aux_char,p=ps1,Am=10^{WT2R}*pop,m1=10^{WT2M},Amm=strength*10^{WT2R}*pop)*exp(aux)
}
#Real part
return(Re(sum/N))
}
discretization_fun<-function(range, n){
mu_min=range[1]
mu_max=range[2]
a=seq(0,n)
result=mu_min*(mu_max/mu_min)^{a/n}
return(result)
}
#log-likelihood function
ll_fun<-function(data,WT2R,WT2M,M2R,pop_size,N,ps1,strength){
sum(log(pmf_coeff(data+1,WT2R,WT2M,M2R,pop_size,N,ps1,strength)))
}
#Reading the file
td <- read.table(File,header = F,sep="")
#Binomial sampling of resistant cells in the j-th growth cycle, j=1
data<-binomial_sampling_GC_j(td, j=GC,p=dilution)
if(resampling==T){
data=sample(data, resample_size, replace = T)
}
#Maximum value in data
N=max(data)
N
#Sample space discretization
paramters_WT2R=WT2R_bounds
WT2R=discretization_fun(paramters_WT2R,discretization)
paramters_WT2M=WT2M_bounds
WT2M=discretization_fun(paramters_WT2M,discretization)
#Initial maximum
max=ll_fun(data, WT2R = WT2R[1], WT2M = WT2M[1], M2R=WT2R[1], population_size, N, dilution, strength)
powers=c()
output=c()
for(i in WT2R){
for(j in WT2M){
aux=ll_fun(data, WT2R = i, WT2M = j, M2R = i,population_size, N, dilution, strength)
output=rbind(output, c(10^{i}, 10^{j}, strength*10^{i}, aux))
if(max<aux){
max=aux
powers=c(10^{i}, 10^{j}, strength*10^{i})
}
}
}
#Maximum value
max
names(powers)=c('Wildtype to Mutant', 'Wildtype to Mutator', 'Mutator to Mutant mutator')
df=as.data.frame(output)
df_confidence<-df[df[,4] >= max-qchisq(1-alpha,2)/2, ]
CI=matrix(0,3,2)
row.names(CI)=c('Wildtype to Mutant', 'Wildtype to Mutator', 'Mutator to Mutant mutator')
colnames(CI)=c('Lower bound','Upper bound')
CI[1,1]=min(df_confidence$V1)
CI[1,2]=max(df_confidence$V1)
CI[2,1]=min(df_confidence$V2)
CI[2,2]=max(df_confidence$V2)
CI[3,1]=min(df_confidence$V3)
CI[3,2]=max(df_confidence$V3)
out=list(powers, CI, output)
names(out)<-c('Estimations', 'ML_Confidence_Interval', 'Log_likelihood')
return(out)
}
ML_Bivariate(File=FILENAME, population_size=2^33, resampling = F, resample_size=0, GC=1, dilution=0.0001, discretization=25, WT2R_bounds=c(-8, -5), WT2M_bounds=c(-7, -3), strength= 1000, alpha=0.05)
