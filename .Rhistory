library(EstimatingMutationRates)
ML_Bivariate(File=FILENAME, population_size=2^33, resampling = F, resample_size=0, GC=1, dilution=0.0001, discretization=25, WT2R_bounds=c(-8, -5), WT2M_bounds=c(-7, -3), strength= 1000)
ML_Estimation(File=FILENAME, population_size=2^33, resampling=F, resample_size=50, GC=2, dilution=0.0001,discretization=25, WT2R_bounds=c(-8, -5), WT2M_bounds=c(-7, -3), M2R_bounds=c(-7, -3))
library(EstimatingMutationRates)
ML_Estimation(File=FILENAME, population_size=2^33, resampling=F, resample_size=50, GC=2, dilution=0.0001,discretization=25, WT2R_bounds=c(-8, -5), WT2M_bounds=c(-7, -3), M2R_bounds=c(-7, -3))
ML_Bivariate(File=FILENAME, population_size=2^33, resampling = F, resample_size=0, GC=1, dilution=0.0001, discretization=25, WT2R_bounds=c(-8, -5), WT2M_bounds=c(-7, -3), strength= 1000)
library(EstimatingMutationRates)
ML_Bivariate(File=FILENAME, population_size=2^33, resampling = F, resample_size=0, GC=1, dilution=0.0001, discretization=25, WT2R_bounds=c(-8, -5), WT2M_bounds=c(-7, -3), strength= 1000)
ML_Bivariate(File=FILENAME, population_size=2^33, resampling = F, resample_size=0, GC=1, dilution=0.0001, discretization=25, WT2R_bounds=c(-8, -5), WT2M_bounds=c(-7, -3), strength= 1000)
ML_Jackknife_CI(Replicates=2, alpha=0.05, FreeCores=5, File=FILENAME, population_size=2^33, resample_size=50, GC=1, dilution_lowerbound=0.00005, dilution_upperbound=2^20/2^33, discretization=25, WT2R_bounds=c(-8, -5), WT2M_bounds=c(-7, -3), M2R_bounds=c(-7, -3))
library(EstimatingMutationRates)
library(EstimatingMutationRates)
ML_BivatiateJackknife_CI(Replicates=2, alpha=0.05, FreeCores=5, File=FILENAME, population_size=2^33, resample_size=50, GC=1, dilution_lowerbound=0.00005, dilution_upperbound=2^20/2^33, discretization=25, WT2R_bounds=c(-8, -5), WT2M_bounds=c(-7, -3), strength=500)
ML_BivariateJackknife_CI(Replicates=2, alpha=0.05, FreeCores=5, File=FILENAME, population_size=2^33, resample_size=50, GC=1, dilution_lowerbound=0.00005, dilution_upperbound=2^20/2^33, discretization=25, WT2R_bounds=c(-8, -5), WT2M_bounds=c(-7, -3), strength=500)
LSQ_Bootstrap_CI<-function(Replicates, alpha, FreeCores, File, population_size, GC,
dilution,discretization, WT2R_bounds, WT2M_bounds, M2R_bounds){
library(parallel)
cl <- makeCluster(detectCores() - FreeCores)
cl
library(doParallel)
registerDoParallel(cl)
rep=Replicates
output<-foreach(k=1:rep)%dopar%{
LSQ_Estimation(File, population_size, GC, dilution, discretization, WT2R_bounds, WT2M_bounds, M2R_bounds)
{
result_1=c()
for(j in 1:rep){
result_1=rbind(result_1,output[[j]])
}
#Estimation
estimate_WT2R=mean(result_1[,1])
estimate_WT2M=mean(result_1[,2])
estimate_M2R=mean(result_1[,3])
confidence_intervals=matrix(0,3,3)
confidence_intervals[1,1]=estimate_WT2R
confidence_intervals[2,1]=estimate_WT2M
confidence_intervals[3,1]=estimate_M2R
#95% confidence region
alpha
for(i in 1:ncol(result_1)){
aux=result_1[,i]
aux=sort(aux)
lower=round(alpha/2*(nrow(result_1)+1))
upper=round((1-alpha/2)*(nrow(result_1)+1))
if(lower==0){
lower=1
}
if(upper>nrow(result_1)){
upper=nrow(result_1)
}
confidence_intervals[i,1]=aux[lower]
confidence_intervals[i,2]=aux[upper]
}
colnames(confidence_intervals)=c('Estimate', 'Lower bound', 'Upper bound')
rownames(confidence_intervals)=c(paste('Wildtype to Mutant | GC',GC), paste('Wildtype to Mutator | CG',GC), paste('Mutator to Mutant mutator  | GC',GC))
return(confidence_intervals)
}
}
}
# LSQ_Bootstrap_CI
#
#
#
#
# You can learn more about package authoring with RStudio at:
#
#
LSQ_Bootstrap_CI<-function(Replicates, alpha, FreeCores, File, population_size, GC,
dilution,discretization, WT2R_bounds, WT2M_bounds, M2R_bounds){
library(parallel)
cl <- makeCluster(detectCores() - FreeCores)
cl
library(doParallel)
registerDoParallel(cl)
rep=Replicates
output<-foreach(k=1:rep)%dopar%{
LSQ_Estimation(File, population_size, GC, dilution, discretization, WT2R_bounds, WT2M_bounds, M2R_bounds)
}
result_1=c()
for(j in 1:rep){
result_1=rbind(result_1,output[[j]])
}
#Estimation
estimate_WT2R=mean(result_1[,1])
estimate_WT2M=mean(result_1[,2])
estimate_M2R=mean(result_1[,3])
confidence_intervals=matrix(0,3,3)
confidence_intervals[1,1]=estimate_WT2R
confidence_intervals[2,1]=estimate_WT2M
confidence_intervals[3,1]=estimate_M2R
#95% confidence region
alpha
for(i in 1:ncol(result_1)){
aux=result_1[,i]
aux=sort(aux)
lower=round(alpha/2*(nrow(result_1)+1))
upper=round((1-alpha/2)*(nrow(result_1)+1))
if(lower==0){
lower=1
}
if(upper>nrow(result_1)){
upper=nrow(result_1)
}
confidence_intervals[i,1]=aux[lower]
confidence_intervals[i,2]=aux[upper]
}
colnames(confidence_intervals)=c('Estimate', 'Lower bound', 'Upper bound')
rownames(confidence_intervals)=c(paste('Wildtype to Mutant | GC',GC), paste('Wildtype to Mutator | CG',GC), paste('Mutator to Mutant mutator  | GC',GC))
return(confidence_intervals)
}
FILENAME="QM-Mutants.txt"
LSQ_Bootstrap_CI(Replicates=2, alpha=0.05, FreeCores=5, File=FILENAME, population_size=2^33, resample_size=50, GC=1, dilution_lowerbound=0.0005, discretization=25, WT2R_bounds=c(-8, -5), WT2M_bounds=c(-7, -3), M2R_bounds=c(-7, -3))
# LSQ_Bootstrap_CI
#
#
#
#
# You can learn more about package authoring with RStudio at:
#
#
LSQ_Bootstrap_CI<-function(Replicates, alpha, FreeCores, File, population_size, GC,
dilution,discretization, WT2R_bounds, WT2M_bounds, M2R_bounds){
library(parallel)
cl <- makeCluster(detectCores() - FreeCores)
cl
library(doParallel)
registerDoParallel(cl)
rep=Replicates
output<-foreach(k=1:rep)%dopar%{
LSQ_Estimation(File, population_size, GC, dilution, discretization, WT2R_bounds, WT2M_bounds, M2R_bounds)
}
result_1=c()
for(j in 1:rep){
result_1=rbind(result_1,output[[j]])
}
#Estimation
estimate_WT2R=mean(result_1[,1])
estimate_WT2M=mean(result_1[,2])
estimate_M2R=mean(result_1[,3])
confidence_intervals=matrix(0,3,3)
confidence_intervals[1,1]=estimate_WT2R
confidence_intervals[2,1]=estimate_WT2M
confidence_intervals[3,1]=estimate_M2R
#95% confidence region
alpha
for(i in 1:ncol(result_1)){
aux=result_1[,i]
aux=sort(aux)
lower=round(alpha/2*(nrow(result_1)+1))
upper=round((1-alpha/2)*(nrow(result_1)+1))
if(lower==0){
lower=1
}
if(upper>nrow(result_1)){
upper=nrow(result_1)
}
confidence_intervals[i,1]=aux[lower]
confidence_intervals[i,2]=aux[upper]
}
colnames(confidence_intervals)=c('Estimate', 'Lower bound', 'Upper bound')
rownames(confidence_intervals)=c(paste('Wildtype to Mutant | GC',GC), paste('Wildtype to Mutator | CG',GC), paste('Mutator to Mutant mutator  | GC',GC))
return(confidence_intervals)
}
FILENAME="QM-Mutants.txt"
LSQ_Bootstrap_CI(Replicates=2, alpha=0.05, FreeCores=5, File=FILENAME, population_size=2^33, GC=1, dilution_lowerbound=0.0005, discretization=25, WT2R_bounds=c(-8, -5), WT2M_bounds=c(-7, -3), M2R_bounds=c(-7, -3))
# LSQ_Bootstrap_CI
#
#
#
#
# You can learn more about package authoring with RStudio at:
#
#
LSQ_Bootstrap_CI<-function(Replicates, alpha, FreeCores, File, population_size, GC,
dilution,discretization, WT2R_bounds, WT2M_bounds, M2R_bounds){
library(parallel)
cl <- makeCluster(detectCores() - FreeCores)
cl
library(doParallel)
registerDoParallel(cl)
rep=Replicates
output<-foreach(k=1:rep)%dopar%{
LSQ_Estimation(File, population_size, GC, dilution, discretization, WT2R_bounds, WT2M_bounds, M2R_bounds)
}
result_1=c()
for(j in 1:rep){
result_1=rbind(result_1,output[[j]])
}
#Estimation
estimate_WT2R=mean(result_1[,1])
estimate_WT2M=mean(result_1[,2])
estimate_M2R=mean(result_1[,3])
confidence_intervals=matrix(0,3,3)
confidence_intervals[1,1]=estimate_WT2R
confidence_intervals[2,1]=estimate_WT2M
confidence_intervals[3,1]=estimate_M2R
#95% confidence region
alpha
for(i in 1:ncol(result_1)){
aux=result_1[,i]
aux=sort(aux)
lower=round(alpha/2*(nrow(result_1)+1))
upper=round((1-alpha/2)*(nrow(result_1)+1))
if(lower==0){
lower=1
}
if(upper>nrow(result_1)){
upper=nrow(result_1)
}
confidence_intervals[i,1]=aux[lower]
confidence_intervals[i,2]=aux[upper]
}
colnames(confidence_intervals)=c('Estimate', 'Lower bound', 'Upper bound')
rownames(confidence_intervals)=c(paste('Wildtype to Mutant | GC',GC), paste('Wildtype to Mutator | CG',GC), paste('Mutator to Mutant mutator  | GC',GC))
return(confidence_intervals)
}
FILENAME="QM-Mutants.txt"
LSQ_Bootstrap_CI(Replicates=2, alpha=0.05, FreeCores=5, File=FILENAME, population_size=2^33, GC=1, dilution=0.0005, discretization=25, WT2R_bounds=c(-8, -5), WT2M_bounds=c(-7, -3), M2R_bounds=c(-7, -3))
# LSQ_Bootstrap_CI
#
#
#
#
# You can learn more about package authoring with RStudio at:
#
#
LSQ_Bootstrap_CI<-function(Replicates, alpha, FreeCores, File, population_size, GC,
dilution,discretization, WT2R_bounds, WT2M_bounds, M2R_bounds){
library(parallel)
cl <- makeCluster(detectCores() - FreeCores)
cl
library(doParallel)
registerDoParallel(cl)
rep=Replicates
output<-foreach(k=1:rep)%dopar%{
EstimatingMutationRates::LSQ_Estimation(File, population_size, GC, dilution, discretization, WT2R_bounds, WT2M_bounds, M2R_bounds)
}
result_1=c()
for(j in 1:rep){
result_1=rbind(result_1,output[[j]])
}
#Estimation
estimate_WT2R=mean(result_1[,1])
estimate_WT2M=mean(result_1[,2])
estimate_M2R=mean(result_1[,3])
confidence_intervals=matrix(0,3,3)
confidence_intervals[1,1]=estimate_WT2R
confidence_intervals[2,1]=estimate_WT2M
confidence_intervals[3,1]=estimate_M2R
#95% confidence region
alpha
for(i in 1:ncol(result_1)){
aux=result_1[,i]
aux=sort(aux)
lower=round(alpha/2*(nrow(result_1)+1))
upper=round((1-alpha/2)*(nrow(result_1)+1))
if(lower==0){
lower=1
}
if(upper>nrow(result_1)){
upper=nrow(result_1)
}
confidence_intervals[i,1]=aux[lower]
confidence_intervals[i,2]=aux[upper]
}
colnames(confidence_intervals)=c('Estimate', 'Lower bound', 'Upper bound')
rownames(confidence_intervals)=c(paste('Wildtype to Mutant | GC',GC), paste('Wildtype to Mutator | CG',GC), paste('Mutator to Mutant mutator  | GC',GC))
return(confidence_intervals)
}
# LSQ_Bootstrap_CI
#
#
#
#
# You can learn more about package authoring with RStudio at:
#
#
LSQ_Bootstrap_CI<-function(Replicates, alpha, FreeCores, File, population_size, GC,
dilution,discretization, WT2R_bounds, WT2M_bounds, M2R_bounds){
library(parallel)
cl <- makeCluster(detectCores() - FreeCores)
cl
library(doParallel)
registerDoParallel(cl)
rep=Replicates
output<-foreach(k=1:rep)%dopar%{
EstimatingMutationRates::LSQ_Estimation(File, population_size, GC, dilution, discretization, WT2R_bounds, WT2M_bounds, M2R_bounds)
}
result_1=c()
for(j in 1:rep){
result_1=rbind(result_1,output[[j]])
}
#Estimation
estimate_WT2R=mean(result_1[,1])
estimate_WT2M=mean(result_1[,2])
estimate_M2R=mean(result_1[,3])
confidence_intervals=matrix(0,3,3)
confidence_intervals[1,1]=estimate_WT2R
confidence_intervals[2,1]=estimate_WT2M
confidence_intervals[3,1]=estimate_M2R
#95% confidence region
alpha
for(i in 1:ncol(result_1)){
aux=result_1[,i]
aux=sort(aux)
lower=round(alpha/2*(nrow(result_1)+1))
upper=round((1-alpha/2)*(nrow(result_1)+1))
if(lower==0){
lower=1
}
if(upper>nrow(result_1)){
upper=nrow(result_1)
}
confidence_intervals[i,1]=aux[lower]
confidence_intervals[i,2]=aux[upper]
}
colnames(confidence_intervals)=c('Estimate', 'Lower bound', 'Upper bound')
rownames(confidence_intervals)=c(paste('Wildtype to Mutant | GC',GC), paste('Wildtype to Mutator | CG',GC), paste('Mutator to Mutant mutator  | GC',GC))
return(confidence_intervals)
}
FILENAME="QM-Mutants.txt"
LSQ_Bootstrap_CI(Replicates=2, alpha=0.05, FreeCores=5, File=FILENAME, population_size=2^33, GC=1, dilution=0.0005, discretization=25, WT2R_bounds=c(-8, -5), WT2M_bounds=c(-7, -3), M2R_bounds=c(-7, -3))
FILENAME="QM-Mutants.txt"
LSQ_Bootstrap_CI(Replicates=2, alpha=0.05, FreeCores=5, File=FILENAME, population_size=2^33, GC=1, dilution=0.0005, discretization=25, WT2R_bounds=c(-8, -5), WT2M_bounds=c(-7, -3), M2R_bounds=c(-7, -3))
FILENAME="QM-Mutants.txt"
LSQ_Bootstrap_CI(Replicates=2, alpha=0.05, FreeCores=5, File=FILENAME, population_size=2^33, GC=1, dilution=0.0005, discretization=25, WT2R_bounds=c(-8, -5), WT2M_bounds=c(-7, -3), M2R_bounds=c(-7, -3))
LSQ_Estimation(File=FILENAME, population_size=2^33, GC=1, dilution=0.0005, discretization=25, WT2R_bounds=c(-8, -5), WT2M_bounds=c(-7, -3), M2R_bounds=c(-7, -3))
FILENAME="QM-Mutants.txt"
LSQ_Bootstrap_CI(Replicates=5, alpha=0.05, FreeCores=5, File=FILENAME, population_size=2^33, GC=1, dilution=0.0005, discretization=25, WT2R_bounds=c(-8, -5), WT2M_bounds=c(-7, -3), M2R_bounds=c(-7, -3))
Replicates=5, alpha=0.05, FreeCores=5, File=FILENAME, population_size=2^33, GC=1, dilution=0.0005, discretization=25, WT2R_bounds=c(-8, -5), WT2M_bounds=c(-7, -3), M2R_bounds=c(-7, -3)
Replicates=5
alpha=0.05
FreeCores=5
File=FILENAME
population_size=2^33
GC=1
dilution=0.0005
discretization=25
WT2R_bounds=c(-8, -5)
WT2M_bounds=c(-7, -3)
M2R_bounds=c(-7, -3)
library(parallel)
cl <- makeCluster(detectCores() - FreeCores)
cl
library(doParallel)
registerDoParallel(cl)
rep=Replicates
output<-foreach(k=1:rep)%dopar%{
EstimatingMutationRates::LSQ_Estimation(File, population_size, GC, dilution, discretization, WT2R_bounds, WT2M_bounds, M2R_bounds)
}
FILENAME="QM-Mutants.txt"
FILENAME="QM-Mutants.txt"
LSQ_Estimation(File, population_size, GC, dilution, discretization, WT2R_bounds, WT2M_bounds, M2R_bounds)
LSQ_Estimation(File, population_size, GC, dilution, discretization, WT2R_bounds, WT2M_bounds, M2R_bounds)
FILENAME="QM-Mutants.txt"
LSQ_Estimation(File, population_size, GC, dilution, discretization, WT2R_bounds, WT2M_bounds, M2R_bounds)
LSQ_Estimation(File, population_size, GC, dilution, discretization, WT2R_bounds, WT2M_bounds, M2R_bounds)
library(parallel)
cl <- makeCluster(detectCores() - FreeCores)
cl
library(doParallel)
registerDoParallel(cl)
rep=Replicates
output<-foreach(k=1:rep)%dopar%{
EstimatingMutationRates::LSQ_Estimation(File, population_size, GC, dilution, discretization, WT2R_bounds, WT2M_bounds, M2R_bounds)
}
output<-foreach(k=1:rep)%dopar%{
EstimatingMutationRates::LSQ_Estimation(File, population_size, GC, dilution, discretization, WT2R_bounds, WT2M_bounds, M2R_bounds)
}
library(parallel)
cl <- makeCluster(detectCores() - FreeCores)
cl
library(doParallel)
registerDoParallel(cl)
rep=Replicates
output<-foreach(k=1:rep)%dopar%{
EstimatingMutationRates::LSQ_Estimation(File, population_size, GC, dilution, discretization, WT2R_bounds, WT2M_bounds, M2R_bounds)
}
library(EstimatingMutationRates)
FILENAME="QM-Mutants.txt"
LSQ_Bootstrap_CI(Replicates=5, alpha=0.05, FreeCores=5, File=FILENAME, population_size=2^33, GC=1, dilution=0.0005, discretization=25, WT2R_bounds=c(-8, -5), WT2M_bounds=c(-7, -3), M2R_bounds=c(-7, -3))
library(EstimatingMutationRates)
LSQ_Bootstrap_CI(Replicates=5, alpha=0.05, FreeCores=5, File=FILENAME, population_size=2^33, GC=1, dilution=0.0005, discretization=25, WT2R_bounds=c(-8, -5), WT2M_bounds=c(-7, -3), M2R_bounds=c(-7, -3))
# LSQ_Bootstrap_CI
#
#
#
#
# You can learn more about package authoring with RStudio at:
#
#
LSQ_Bootstrap_CI<-function(Replicates, alpha, FreeCores, File, population_size, GC,
dilution,discretization, WT2R_bounds, WT2M_bounds, M2R_bounds){
library(parallel)
cl <- makeCluster(detectCores() - FreeCores)
cl
library(doParallel)
registerDoParallel(cl)
rep=Replicates
output<-foreach(k=1:rep)%dopar%{
EstimatingMutationRates::LSQ_Estimation(File, population_size, GC, dilution, discretization, WT2R_bounds, WT2M_bounds, M2R_bounds)
}
result_1=c()
for(j in 1:rep){
result_1=rbind(result_1,output[[j]])
}
#Estimation
estimate_WT2R=mean(result_1[,1])
estimate_WT2M=mean(result_1[,2])
estimate_M2R=mean(result_1[,3])
confidence_intervals=matrix(0,3,3)
confidence_intervals[1,1]=estimate_WT2R
confidence_intervals[2,1]=estimate_WT2M
confidence_intervals[3,1]=estimate_M2R
#95% confidence region
alpha
for(i in 1:ncol(result_1)){
aux=result_1[,i]
aux=sort(aux)
lower=round(alpha/2*(nrow(result_1)+1))
upper=round((1-alpha/2)*(nrow(result_1)+1))
if(lower==0){
lower=1
}
if(upper>nrow(result_1)){
upper=nrow(result_1)
}
confidence_intervals[i,2]=aux[lower]
confidence_intervals[i,3]=aux[upper]
}
colnames(confidence_intervals)=c('Estimate', 'Lower bound', 'Upper bound')
rownames(confidence_intervals)=c(paste('Wildtype to Mutant | GC',GC), paste('Wildtype to Mutator | CG',GC), paste('Mutator to Mutant mutator  | GC',GC))
return(confidence_intervals)
}
confidence_intervals=matrix(0,3,3)
confidence_intervals[1,1]=estimate_WT2R
dilution,discretization, WT2R_bounds, WT2M_bounds, M2R_bounds){
library(parallel)
cl <- makeCluster(detectCores() - FreeCores)
cl
library(doParallel)
registerDoParallel(cl)
rep=Replicates
output<-foreach(k=1:rep)%dopar%{
EstimatingMutationRates::LSQ_Estimation(File, population_size, GC, dilution, discretization, WT2R_bounds, WT2M_bounds, M2R_bounds)
}
result_1=c()
for(j in 1:rep){
result_1=rbind(result_1,output[[j]])
}
result_1
estimate_WT2R=mean(result_1[,1])
estimate_WT2M=mean(result_1[,2])
estimate_M2R=mean(result_1[,3])
confidence_intervals=matrix(0,3,3)
confidence_intervals[1,1]=estimate_WT2R
confidence_intervals[2,1]=estimate_WT2M
confidence_intervals[3,1]=estimate_M2R
confidence_intervals
confidence_intervals[2,2]
confidence_intervals[2,3]
i=1
aux=result_1[,i]
aux
aux=sort(aux)
aux
lower=round(alpha/2*(nrow(result_1)+1))
upper=round((1-alpha/2)*(nrow(result_1)+1))
lower
upper
if(lower==0){
lower=1
}
if(upper>nrow(result_1)){
upper=nrow(result_1)
}
lower
upper
aux[1]
aux[5]
confidence_intervals[i,2]=aux[lower]
confidence_intervals[i,3]=aux[upper]
confidence_intervals
library(EstimatingMutationRates)
FILENAME="QM-Mutants.txt"
LSQ_Bootstrap_CI(Replicates=5, alpha=0.05, FreeCores=5, File=FILENAME, population_size=2^33, GC=1, dilution=0.0005, discretization=25, WT2R_bounds=c(-8, -5), WT2M_bounds=c(-7, -3), M2R_bounds=c(-7, -3))
setwd("~/GitHub/EstimatingMutationRates/R")
library(EstimatingMutationRates)
ML_Estimation(File=FILENAME, population_size=2^33, resampling=F, resample_size=50, GC=2, dilution=0.0001,discretization=25, WT2R_bounds=c(-8, -5), WT2M_bounds=c(-7, -3), M2R_bounds=c(-7, -3))
library(EstimatingMutationRates)
ML_Estimation(File=FILENAME, population_size=2^33, resampling=F, resample_size=50, GC=2, dilution=0.0001,discretization=25, WT2R_bounds=c(-8, -5), WT2M_bounds=c(-7, -3), M2R_bounds=c(-7, -3))
setwd("~/GitHub/EstimatingMutationRates/R")
FILENAME="QM-Mutants.txt"
LSQ_Bootstrap_CI(Replicates=5, alpha=0.05, FreeCores=5, File=FILENAME, population_size=2^33, GC=1, dilution=0.0005, discretization=25, WT2R_bounds=c(-8, -5), WT2M_bounds=c(-7, -3), M2R_bounds=c(-7, -3))
library(EstimatingMutationRates)
LSQ_Bootstrap_CI(Replicates=5, alpha=0.05, FreeCores=5, File=FILENAME, population_size=2^33, GC=1, dilution=0.0005, discretization=25, WT2R_bounds=c(-8, -5), WT2M_bounds=c(-7, -3), M2R_bounds=c(-7, -3))
use_data(FILENAME)
library(devtools)
use_data(FILENAME)
load("~/GitHub/EstimatingMutationRates/data/FILENAME.rda")
load("~/GitHub/EstimatingMutationRates/data/FILENAME.rda")
setwd("~/GitHub/EstimatingMutationRates")
LSQ_Bootstrap_CI(Replicates=5, alpha=0.05, FreeCores=5, File=FILENAME, population_size=2^33, GC=1, dilution=0.0005, discretization=25, WT2R_bounds=c(-8, -5), WT2M_bounds=c(-7, -3), M2R_bounds=c(-7, -3))
setwd("~/GitHub/EstimatingMutationRates/R/ExampleWorkingDirectory")
estimates=LSQ_Estimation(File=FILENAME, population_size=2^33, GC=3, dilution=0.0000005,
discretization=30, WT2R_bounds=c(-8, -5), WT2M_bounds=c(-7, -3), M2R_bounds=c(-7, -3))
estimates
LSQ_Bootstrap_CI(Replicates=500, alpha=0.05, FreeCores=5, File=FILENAME, population_size=2^33, GC=1, dilution=0.0005, discretization=25, WT2R_bounds=c(-9.5, -5.5), WT2M_bounds=c(-8, -4), M2R_bounds=c(-7, -3))
LSQ_Bootstrap_CI(Replicates=5, alpha=0.05, FreeCores=5, File=FILENAME, population_size=2^33, GC=1, dilution=0.0005, discretization=25, WT2R_bounds=c(-9.5, -5.5), WT2M_bounds=c(-8, -4), M2R_bounds=c(-7, -3))
FILENAME="QM-Mutants.txt"
ML_Jackknife_CI(Replicates=5, alpha=0.05, FreeCores=5, File=FILENAME, population_size=2^33, resample_size=50, GC=1, dilution_lowerbound=0.00005, dilution_upperbound=2^20/2^33, discretization=25, WT2R_bounds=c(-8, -5), WT2M_bounds=c(-7, -3), M2R_bounds=c(-6, -2))
library(EstimatingMutationRates)
